"use client";
import React, { useEffect, useState, useRef } from "react";
import styles from "./Advantages.module.css";
import Container from "@/shared/components/Container/Container";
import AdvantagesCard from "@/shared/components/AdvantagesCard/AdvantagesCard";

const Advantages = () => {
  const cards = [
    {
      title: "–õ—é–¥—è–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥",
      description:
        "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä–∏ –¥–±–∞—é—Ç—å –ø—Ä–æ —Å–≤–æ—ó—Ö –ø—ñ–¥–ª–µ–≥–ª–∏—Ö, –∞ –ø—Ä–∏–Ω—Ü–∏–ø –≤–∑–∞—î–º–æ–ø—ñ–¥—Ç—Ä–∏–º–∫–∏ ‚Äì –æ—Å–Ω–æ–≤–∞  —É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ.",
      icon: "ü§ù",
    },
    ,
    {
      title: "–ì—Ä–æ—à–æ–≤–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è",
      description: "–ì—Ä–æ—à–æ–≤–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –≤  –°–°–û –æ—Ç—Ä–∏–º—É—é—Ç—å –Ω–∞ 30%  –±—ñ–ª—å—à–µ",
      icon: "üíµ",
    },
    ,
    {
      title: "–í—ñ–π—Å—å–∫–æ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞",
      description:
        "–°–°–û ‚Äì —Ü–µ –Ω–∞–π–≤–∏—â–∏–π —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏. –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –±–æ–π–æ–≤–∞ —Ç–∞–∫—Ç–∏–∫–∞, —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Å—Ç—ñ–π–Ω—ñ –Ω–∞–≤—á–∞–Ω–Ω—è.",
      icon: "ü™ñ",
    },
    ,
    {
      title: "–°—É—á–∞—Å–Ω–µ –æ—Å–Ω–∞—â–µ–Ω–Ω—è",
      description:
        "–ü–µ—Ä–µ–¥–æ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –Ω–æ–≤—ñ—Ç–Ω—è –∑–±—Ä–æ—è, —Ä–æ–∑–≤—ñ–¥ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–∞–π–≤–∏—â–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.",
      icon: "üî´",
    },
    {
      title: "–ö–∞—Ä'—î—Ä–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è",
      description:
        "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ä—è–¥–æ–≤–æ–≥–æ –¥–æ –æ—Ñ—ñ—Ü–µ—Ä–∞, –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞ –∫–æ—Ä–¥–æ–Ω–æ–º, —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∫—É—Ä—Å–∏ —Ç–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –ø—ñ—Å–ª—è —Å–ª—É–∂–±–∏.",
      icon: "üìà",
    },

    {
      title: "–ó–≥—Ä–∞—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤",
      description:
        "–°–°–û —Ü–µ –¥—Ä—É–≥–∞ —Ä–æ–¥–∏–Ω–∞, —è–∫–∞ –ø—Ä–∏–∫—Ä–∏—î —Ç–≤–æ—é —Å–ø–∏–Ω—É —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—î –∫–æ–ª–∏ —Ç–∏ –±—É–¥–µ—à —Ü—å–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏.",
      icon: "üê∫",
    },
  ];

  const [scrollCount, setScrollCount] = useState(0);
  const sectionRef = useRef(null);
  const containerRef = useRef(null);
  const touchStartX = useRef(0);

  useEffect(() => {
    const section = sectionRef.current;
    if (!section) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.intersectionRatio === 1) {
          document.documentElement.style.overflow = "hidden";

          window.scrollTo({
            top: window.scrollY,
            behavior: "instant",
          });

          const handleScroll = (e) => {
            e.preventDefault();
            const delta = e.deltaY;

            setScrollCount((prevscrollCount) => {
              let newscrollCount = prevscrollCount + delta;

              if (containerRef.current) {
                if (
                  newscrollCount >=
                  containerRef.current.scrollWidth -
                    containerRef.current.offsetWidth
                ) {
                  newscrollCount =
                    containerRef.current.scrollWidth -
                    containerRef.current.offsetWidth;

                  document.documentElement.style.overflow = "";
                  window.removeEventListener("wheel", handleScroll);
                }

                if (newscrollCount < 0) {
                  document.documentElement.style.overflow = "";
                  window.removeEventListener("wheel", handleScroll);
                  return 0;
                }
              }

              return newscrollCount;
            });
          };

          const handleTouchStart = (e) => {
            touchStartX.current = e.touches[0].clientY;
          };

          const handleTouchMove = (e) => {
            const touchMoveX = touchStartX.current - e.touches[0].clientY;
            if (touchMoveX < 0) {
              const delta = -30;
              setScrollCount((prevscrollCount) => {
                let newscrollCount = prevscrollCount + delta;
                if (newscrollCount <= 0) {
                  document.documentElement.style.overflow = "";
                  window.removeEventListener("touchmove", handleTouchMove);
                  return 0;
                }
                return newscrollCount;
              });
            }
            if (touchMoveX > 0) {
              const delta = 30;
              setScrollCount((prevscrollCount) => {
                let newscrollCount = prevscrollCount + delta;
                if (
                  newscrollCount >=
                  containerRef.current.scrollWidth -
                    containerRef.current.offsetWidth
                ) {
                  newscrollCount =
                    containerRef.current.scrollWidth -
                    containerRef.current.offsetWidth;

                  document.documentElement.style.overflow = "";
                  window.removeEventListener("touchmove", handleTouchMove);
                }
                return newscrollCount;
              });
            }
          };

          window.addEventListener("wheel", handleScroll, { passive: false });

          window.addEventListener("touchmove", handleTouchMove, {
            passive: false,
          });
          window.addEventListener("touchstart", handleTouchStart, {
            passive: true,
          });

          return () => {
            window.removeEventListener("wheel", handleScroll);
            window.removeEventListener("touchmove", handleTouchMove);
          };
        }
      },
      {
        threshold: 1,
      }
    );

    observer.observe(section);

    return () => {
      observer.unobserve(section);
    };
  }, []);

  return (
    <Container>
      <div className={styles.advantages}>
        <div className={styles.image}></div>
        <h2 className={styles.title}>–ü–µ—Ä–µ–≤–∞–≥–∏ —Å–ª—É–∂–±–∏ –≤ –°–°–û</h2>
        <div className={styles.container} ref={sectionRef}>
          <div
            className={styles.wrapper}
            ref={containerRef}
            style={{ transform: `translateX(-${scrollCount}px)` }}
          >
            {cards.map((card, index) => (
              <AdvantagesCard key={index} card={card} />
            ))}
          </div>
        </div>
      </div>
    </Container>
  );
};

export default Advantages;
